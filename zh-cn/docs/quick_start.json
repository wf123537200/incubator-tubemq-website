{
  "filename": "quick_start.md",
  "__html": "<h2>准备工作</h2>\n<ul>\n<li>Java 1.7 或 1.8(Java 9 及以上，未经测试验证)</li>\n<li>Maven 3.* 及以上</li>\n</ul>\n<h2>构建</h2>\n<h3>从下载的发行版代码包构建</h3>\n<p>在TubeMQ根目录下执行命令：</p>\n<pre><code class=\"language-bash\">mvn clean package -DskipTests\n</code></pre>\n<p>在根目录执行 <code>mvn clean install</code> 之后，可以单独对每个 module 进行构建。</p>\n<h3>基于源代码构建</h3>\n<p>在IDE中构建和调试源码，需要先运行以下命令：</p>\n<pre><code class=\"language-bash\">mvn compile\n</code></pre>\n<p>执行之后，会生成 <code>protoc</code> 文件对应的 java source file，位于 <code>target/generated-sources</code> 目录。</p>\n<p>然后就可以在 IDE 中打开 TubeMQ 工程。</p>\n<p>你可以跳到 下一章 部署运行 ， 除非你准备自己编译proto 文件。（通常不需要，mvn会自动下载protoc 构建)。</p>\n<p>如果你打算使用本地的 <code>protoc</code> 可执行文件，你可以修改 <code>tubemq-core/pom.xml</code> 下的 <code>protobuf-maven-plugin</code> 的配置，如下所示。</p>\n<pre><code class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">configuration</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">outputDirectory</span>&gt;</span>${project.build.directory}/generated-sources/java<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">outputDirectory</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">protocExecutable</span>&gt;</span>/usr/local/bin/protoc<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">protocExecutable</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">configuration</span>&gt;</span>\n</code></pre>\n<h2>部署运行</h2>\n<p>构建完成之后，在 <code>tubemq-server/target</code> 目录下会有 <strong>tubemq-server-x.x.x-bin.tar.gz</strong> 文件.\n这是 Server 的部署包，包含了脚本、配置文件、依赖以及 web GUI相关的内容。</p>\n<p>首次部署，只需要解压部署包，解压之后的目录结构如下：</p>\n<pre><code>/opt/tubemq-server\n├── bin\n├── conf\n├── lib\n├── logs\n└── resources\n</code></pre>\n<h3>配置</h3>\n<p>TubeMQ 集群有两个角色: <strong>Master</strong> 和 <strong>Broker</strong>. Master 和 Broker 可以部署在相同或者不同的节点上。下面是\n一个集群的配置示例：</p>\n<table>\n<thead>\n<tr>\n<th>Role</th>\n<th>TCP Port</th>\n<th>TLS Port</th>\n<th>Web Port</th>\n<th>Comment</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Master</td>\n<td>8099</td>\n<td>8199</td>\n<td>8080</td>\n<td>元数据存储在 /stage/metadata</td>\n</tr>\n<tr>\n<td>Broker</td>\n<td>8123</td>\n<td>8124</td>\n<td>8081</td>\n<td>消息存储在 /stage/msgdata</td>\n</tr>\n<tr>\n<td>Zookeeper</td>\n<td>2181</td>\n<td></td>\n<td></td>\n<td>Offset 存储在 /tubemq</td>\n</tr>\n</tbody>\n</table>\n<p>详细的配置信息如下所示，注意将 <code>YOUR_SERVER_IP</code> 替换为真实的IP。</p>\n<h4>master.ini</h4>\n<pre><code class=\"language-ini\"><span class=\"hljs-section\">[master]</span>\n<span class=\"hljs-attr\">hostName</span>=YOUR_SERVER_IP\n<span class=\"hljs-attr\">port</span>=<span class=\"hljs-number\">8000</span>\n<span class=\"hljs-attr\">webPort</span>=<span class=\"hljs-number\">8080</span>\n<span class=\"hljs-attr\">consumerBalancePeriodMs</span>=<span class=\"hljs-number\">30000</span>\n<span class=\"hljs-attr\">firstBalanceDelayAfterStartMs</span>=<span class=\"hljs-number\">60000</span>\n<span class=\"hljs-attr\">consumerHeartbeatTimeoutMs</span>=<span class=\"hljs-number\">30000</span>\n<span class=\"hljs-attr\">producerHeartbeatTimeoutMs</span>=<span class=\"hljs-number\">45000</span>\n<span class=\"hljs-attr\">brokerHeartbeatTimeoutMs</span>=<span class=\"hljs-number\">25000</span>\n<span class=\"hljs-attr\">confModAuthToken</span>=abc\n<span class=\"hljs-attr\">webResourcePath</span>=/opt/tubemq-server/resources\n\n<span class=\"hljs-section\">[zookeeper]</span>\n<span class=\"hljs-attr\">zkNodeRoot</span>=/tubemq\n<span class=\"hljs-attr\">zkServerAddr</span>=localhost:<span class=\"hljs-number\">2181</span>\n<span class=\"hljs-attr\">zkSessionTimeoutMs</span>=<span class=\"hljs-number\">30000</span>\n<span class=\"hljs-attr\">zkConnectionTimeoutMs</span>=<span class=\"hljs-number\">30000</span>\n<span class=\"hljs-attr\">zkSyncTimeMs</span>=<span class=\"hljs-number\">5000</span>\n<span class=\"hljs-attr\">zkCommitPeriodMs</span>=<span class=\"hljs-number\">5000</span>\n\n<span class=\"hljs-section\">[replication]</span>\n<span class=\"hljs-comment\">; name of current node; MUST BE DIFFERENT for every node in the cluster</span>\n<span class=\"hljs-attr\">repNodeName</span>=tubemqMasterGroupNode1\n<span class=\"hljs-comment\">; helperHost(and port) for nodes to join master cluster</span>\n<span class=\"hljs-attr\">repHelperHost</span>=YOUR_SERVER_IP:<span class=\"hljs-number\">9001</span>\n</code></pre>\n<h5>resources/velocity.properties</h5>\n<pre><code class=\"language-properties\"><span class=\"hljs-meta\">resource.loader</span>=<span class=\"hljs-string\">file</span>\n<span class=\"hljs-meta\">file.resource.loader.description</span>=<span class=\"hljs-string\">Velocity File Resource Loader</span>\n<span class=\"hljs-meta\">file.resource.loader.class</span>=<span class=\"hljs-string\">org.apache.velocity.runtime.resource.loader.FileResourceLoader</span>\n<span class=\"hljs-meta\">file.resource.loader.path</span>=<span class=\"hljs-string\">/opt/tubemq-server/resources/templates</span>\n<span class=\"hljs-meta\">file.resource.loader.cache</span>=<span class=\"hljs-string\">false</span>\n<span class=\"hljs-meta\">file.resource.loader.modificationCheckInterval</span>=<span class=\"hljs-string\">2</span>\n<span class=\"hljs-meta\">string.resource.loader.description</span>=<span class=\"hljs-string\">Velocity String Resource Loader</span>\n<span class=\"hljs-meta\">string.resource.loader.class</span>=<span class=\"hljs-string\">org.apache.velocity.runtime.resource.loader.StringResourceLoader</span>\n<span class=\"hljs-meta\">input.encoding</span>=<span class=\"hljs-string\">UTF-8</span>\n<span class=\"hljs-meta\">output.encoding</span>=<span class=\"hljs-string\">UTF-8</span>\n</code></pre>\n<h5>conf/broker.ini</h5>\n<pre><code class=\"language-ini\"><span class=\"hljs-section\">[broker]</span>\n<span class=\"hljs-attr\">brokerId</span>=<span class=\"hljs-number\">0</span>\n<span class=\"hljs-attr\">hostName</span>=YOUR_SERVER_IP\n<span class=\"hljs-attr\">port</span>=<span class=\"hljs-number\">8123</span>\n<span class=\"hljs-attr\">webPort</span>=<span class=\"hljs-number\">8081</span>\n<span class=\"hljs-attr\">masterAddressList</span>=YOUR_SERVER_IP:<span class=\"hljs-number\">8000</span>\n<span class=\"hljs-attr\">primaryPath</span>=/stage/msgdata\n<span class=\"hljs-attr\">maxSegmentSize</span>=<span class=\"hljs-number\">1073741824</span>\n<span class=\"hljs-attr\">maxIndexSegmentSize</span>=<span class=\"hljs-number\">22020096</span>\n<span class=\"hljs-attr\">transferSize</span>= <span class=\"hljs-number\">524288</span>\n<span class=\"hljs-attr\">loadMessageStoresInParallel</span>=<span class=\"hljs-literal\">true</span>\n<span class=\"hljs-attr\">consumerRegTimeoutMs</span>=<span class=\"hljs-number\">35000</span>\n\n<span class=\"hljs-section\">[zookeeper]</span>\n<span class=\"hljs-attr\">zkNodeRoot</span>=/tubemq\n<span class=\"hljs-attr\">zkServerAddr</span>=localhost:<span class=\"hljs-number\">2181</span>\n<span class=\"hljs-attr\">zkSessionTimeoutMs</span>=<span class=\"hljs-number\">30000</span>\n<span class=\"hljs-attr\">zkConnectionTimeoutMs</span>=<span class=\"hljs-number\">30000</span>\n<span class=\"hljs-attr\">zkSyncTimeMs</span>=<span class=\"hljs-number\">5000</span>\n<span class=\"hljs-attr\">zkCommitPeriodMs</span>=<span class=\"hljs-number\">5000</span>\n<span class=\"hljs-attr\">zkCommitFailRetries</span>=<span class=\"hljs-number\">10</span>\n\n</code></pre>\n<p>特别的，对于 Master 节点，需要在 <code>/etc/hosts</code> 中配置其他 Master 节点的信息，如果 Master 节点的IP地址为<code>192.168.1.2</code>：</p>\n<pre><code>192.168.1.2 192-168-1-2\n</code></pre>\n<h2>高可用性介紹</h2>\n<p>在上面的例子中，我们在单个节点上运行服务。然而，在实际的生产环境中，\n你需要在不同的服务器上运行多个 Master 服务以达到高可用性的目的。\n下面是可用性级别的介绍：</p>\n<table>\n<thead>\n<tr>\n<th>HA级别</th>\n<th>Master数量</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>高</td>\n<td>3 masters</td>\n<td>任何主节点崩溃后，集群元数据仍处于读/写状态，可以接受新的生产者/消费者。</td>\n</tr>\n<tr>\n<td>中</td>\n<td>2 masters</td>\n<td>一个主节点崩溃后，集群元数据处于只读状态。对现有的生产者和消费者没有任何影响。</td>\n</tr>\n<tr>\n<td>低</td>\n<td>1 master</td>\n<td>主节点崩溃后，对现有的生产者和消费者没有影响。</td>\n</tr>\n</tbody>\n</table>\n<p>请注意，主服务器的时钟应该是同步的。</p>\n<h2>启动集群</h2>\n<p>配置完成之后，就可以按照以下步骤启动集群。</p>\n<h3>启动主节点</h3>\n<p>完成如上配置设置后，首先进入主备Master所在的TubeMQ环境的 <code>bin</code> 目录，进行服务启动操作。</p>\n<pre><code class=\"language-bash\">./tubemq master start\n</code></pre>\n<p>访问Master的管控台 <code>http://your-master-ip:8080</code> ，页面可查则表示 master 已成功启动。</p>\n<p><img src=\"img/tubemq-console-gui.png\" alt=\"TubeMQ Console GUI\"></p>\n<h2>启动代理</h2>\n<p>Broker启动前，首先要在Master上配置Broker元数据，增加Broker相关的管理信息。</p>\n<p>在<code>Broker List</code> 页面,  <code>Add Single Broker</code>，然后填写相关信息。</p>\n<p><img src=\"img/tubemq-add-broker-1.png\" alt=\"Add Broker 1\"></p>\n<p>需要填写的内容包括：</p>\n<ol>\n<li>broker IP: broker server ip</li>\n<li>authToken:  <code>conf/master.ini</code> 文件中 <code>confModAuthToken</code> 字段配置的 token</li>\n</ol>\n<p>然后上线Broker：</p>\n<p><img src=\"img/tubemq-add-broker-2.png\" alt=\"Add Broker 2\"></p>\n<p>到 Broker 节点的 <code>bin</code> 目录下，执行以下命令启动 Broker服务：</p>\n<pre><code class=\"language-bash\">./tubemq broker start\n</code></pre>\n<p>刷新页面可以看到 Broker 已经注册，当 <code>当前运行子状态</code> 为 <code>idle</code> 时， 可以增加topic。</p>\n<p><img src=\"img/tubemq-add-broker-3.png\" alt=\"Add Broker 3\"></p>\n<h2>新增 Topic</h2>\n<p>可以通过 web GUI 添加 Topic， 在 <code>Topic列表</code>页面添加，需要填写相关信息</p>\n<p><img src=\"img/tubemq-add-topic-1.png\" alt=\"Add Topic 1\"></p>\n<p>然后选择部署 Topic 的 Broker</p>\n<p><img src=\"img/tubemq-add-topic-5.png\" alt=\"Add Topic 5\"></p>\n<p>此时 Broker的 <code>可发布</code> 和 <code>可订阅</code> 依旧是灰色的</p>\n<p><img src=\"img/tubemq-add-topic-6.png\" alt=\"Add Topic 6\"></p>\n<p>需要在 <code>Broker列表</code>页面重载Broker 配置</p>\n<p><img src=\"img/tubemq-add-topic-2.png\" alt=\"Add Topic 2\"></p>\n<p><img src=\"img/tubemq-add-topic-3.png\" alt=\"Add Topic 3\"></p>\n<p>之后就可以在页面查看Topic信息。</p>\n<p><img src=\"img/tubemq-add-topic-4.png\" alt=\"Add Topic 4\"></p>\n<h2>运行示例</h2>\n<p>可以使用 Example 来测试集群。首先，我们运行 producer的demo，注意将 <code>YOUR_SERVER_IP</code> 替换为实际的IP（例如：localhost）</p>\n<pre><code class=\"language-bash\">java -Dlog4j.configuration=file:/opt/tubemq-server/conf/tools.log4j.properties  \\\n-Djava.net.preferIPv4Stack=<span class=\"hljs-literal\">true</span> -cp  /opt/tubemq-server/lib/*:/opt/tubemq-server/conf/* \\\norg.apache.tubemq.example.MessageProducerExample \\\nYOUR_SERVER_IP:8000 demo 10000000\n</code></pre>\n<p>从日志我们可以看到，数据发送成功</p>\n<pre><code class=\"language-bash\">[2020-06-04 11:19:04,405] INFO Send demo 1000 message, keyCount is 252 (org.apache.tubemq.example.MessageProducerExample)\n[2020-06-04 11:19:04,652] INFO Send demo 2000 message, keyCount is 502 (org.apache.tubemq.example.MessageProducerExample)\n[2020-06-04 11:19:05,096] INFO Send demo 3000 message, keyCount is 752 (org.apache.tubemq.example.MessageProducerExample)\n[2020-06-04 11:19:05,181] INFO Send demo 4000 message, keyCount is 1002 (org.apache.tubemq.example.MessageProducerExample)\n</code></pre>\n<p>然后运行 consume 的 demo，<code>YOUR_SERVER_IP</code> 也需要替换（例如： localhost）</p>\n<pre><code class=\"language-bash\">java -Xmx512m -Dlog4j.configuration=file:/opt/tubemq-server/conf/tools.log4j.properties \\\n-Djava.net.preferIPv4Stack=<span class=\"hljs-literal\">true</span> -cp /opt/tubemq-server/lib/*:/opt/tubemq-server/conf/* \\\norg.apache.tubemq.example.MessageConsumerExample \\\nYOUR_SERVER_IP:8000 demo demoGroup 3 1 1\n</code></pre>\n<p>从日志我们可以看到，数据被消费者消费到</p>\n<pre><code class=\"language-bash\">[2020-06-04 11:20:29,107] INFO Receive messages:270000 (org.apache.tubemq.example.MsgRecvStats)\n[2020-06-04 11:20:31,206] INFO Receive messages:272500 (org.apache.tubemq.example.MsgRecvStats)\n[2020-06-04 11:20:31,590] INFO Receive messages:275000 (org.apache.tubemq.example.MsgRecvStats)\n[2020-06-04 11:20:31,910] INFO Receive messages:277500 (org.apache.tubemq.example.MsgRecvStats)\n</code></pre>\n<hr>\n",
  "link": "/zh-cn/docs/quick_start.html",
  "meta": {}
}