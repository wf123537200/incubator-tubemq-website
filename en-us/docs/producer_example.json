{
  "filename": "producer_example.md",
  "__html": "<h2>Producer Example</h2>\n<p>TubeMQ provides two ways to initialize session factory, TubeSingleSessionFactory and TubeMultiSessionFactory:</p>\n<ul>\n<li>TubeSingleSessionFactory creates only one session in the lifecycle, this is very useful in streaming scenarios.</li>\n<li>TubeMultiSessionFactory creates new session on every call.</li>\n</ul>\n<ol>\n<li>\n<p>TubeSingleSessionFactory</p>\n<ul>\n<li>Send Message Synchronously</li>\n</ul>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">SyncProducerExample</span> </span>{\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> <span class=\"hljs-keyword\">throws</span> Throwable </span>{\n        <span class=\"hljs-keyword\">final</span> String masterHostAndPort = <span class=\"hljs-string\">\"localhost:8000\"</span>;\n        <span class=\"hljs-keyword\">final</span> TubeClientConfig clientConfig = <span class=\"hljs-keyword\">new</span> TubeClientConfig(masterHostAndPort);\n        <span class=\"hljs-keyword\">final</span> MessageSessionFactory messageSessionFactory = <span class=\"hljs-keyword\">new</span> TubeSingleSessionFactory(clientConfig);\n        <span class=\"hljs-keyword\">final</span> MessageProducer messageProducer = messageSessionFactory.createProducer();\n        <span class=\"hljs-keyword\">final</span> String topic = <span class=\"hljs-string\">\"test\"</span>;\n        <span class=\"hljs-keyword\">final</span> String body = <span class=\"hljs-string\">\"This is a test message from single-session-factory!\"</span>;\n        <span class=\"hljs-keyword\">byte</span>[] bodyData = StringUtils.getBytesUtf8(body);\n        messageProducer.publish(topic);\n        Message message = <span class=\"hljs-keyword\">new</span> Message(topic, bodyData);\n        MessageSentResult result = messageProducer.sendMessage(message);\n        <span class=\"hljs-keyword\">if</span> (result.isSuccess()) {\n            System.out.println(<span class=\"hljs-string\">\"sync send message : \"</span> + message);\n        }\n        messageProducer.shutdown();\n    }\n}\n</code></pre>\n<ul>\n<li>Send Message Asynchronously</li>\n</ul>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">AsyncProducerExample</span> </span>{\n \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> <span class=\"hljs-keyword\">throws</span> Throwable </span>{\n        <span class=\"hljs-keyword\">final</span> String masterHostAndPort = <span class=\"hljs-string\">\"localhost:8000\"</span>;\n        <span class=\"hljs-keyword\">final</span> TubeClientConfig clientConfig = <span class=\"hljs-keyword\">new</span> TubeClientConfig(masterHostAndPort);\n        <span class=\"hljs-keyword\">final</span> MessageSessionFactory messageSessionFactory = <span class=\"hljs-keyword\">new</span> TubeSingleSessionFactory(clientConfig);\n        <span class=\"hljs-keyword\">final</span> MessageProducer messageProducer = messageSessionFactory.createProducer();\n        <span class=\"hljs-keyword\">final</span> String topic = <span class=\"hljs-string\">\"test\"</span>;\n        <span class=\"hljs-keyword\">final</span> String body = <span class=\"hljs-string\">\"async send message from single-session-factory!\"</span>;\n        <span class=\"hljs-keyword\">byte</span>[] bodyData = StringUtils.getBytesUtf8(body);\n        messageProducer.publish(topic);\n        <span class=\"hljs-keyword\">final</span> Message message = <span class=\"hljs-keyword\">new</span> Message(topic, bodyData);\n        messageProducer.sendMessage(message, <span class=\"hljs-keyword\">new</span> MessageSentCallback(){\n            <span class=\"hljs-meta\">@Override</span>\n            <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">onMessageSent</span><span class=\"hljs-params\">(MessageSentResult result)</span> </span>{\n                <span class=\"hljs-keyword\">if</span> (result.isSuccess()) {\n                    System.out.println(<span class=\"hljs-string\">\"async send message : \"</span> + message);\n                } <span class=\"hljs-keyword\">else</span> {\n                    System.out.println(<span class=\"hljs-string\">\"async send message failed : \"</span> + result.getErrMsg());\n                }\n            }\n            <span class=\"hljs-meta\">@Override</span>\n            <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">onException</span><span class=\"hljs-params\">(Throwable e)</span> </span>{\n                System.out.println(<span class=\"hljs-string\">\"async send message error : \"</span> + e);\n            }\n        });\n        messageProducer.shutdown();\n    }\n\n}\n</code></pre>\n<ul>\n<li>Send Message With Attributes</li>\n</ul>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">ProducerWithAttributeExample</span> </span>{\n \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> <span class=\"hljs-keyword\">throws</span> Throwable </span>{\n        <span class=\"hljs-keyword\">final</span> String masterHostAndPort = <span class=\"hljs-string\">\"localhost:8000\"</span>;\n        <span class=\"hljs-keyword\">final</span> TubeClientConfig clientConfig = <span class=\"hljs-keyword\">new</span> TubeClientConfig(masterHostAndPort);\n        <span class=\"hljs-keyword\">final</span> MessageSessionFactory messageSessionFactory = <span class=\"hljs-keyword\">new</span> TubeSingleSessionFactory(clientConfig);\n        <span class=\"hljs-keyword\">final</span> MessageProducer messageProducer = messageSessionFactory.createProducer();\n        <span class=\"hljs-keyword\">final</span> String topic = <span class=\"hljs-string\">\"test\"</span>;\n        <span class=\"hljs-keyword\">final</span> String body = <span class=\"hljs-string\">\"send message with attribute from single-session-factory!\"</span>;\n        <span class=\"hljs-keyword\">byte</span>[] bodyData = StringUtils.getBytesUtf8(body);\n        messageProducer.publish(topic);\n        Message message = <span class=\"hljs-keyword\">new</span> Message(topic, bodyData);\n        <span class=\"hljs-comment\">//set attribute</span>\n        message.setAttrKeyVal(<span class=\"hljs-string\">\"test_key\"</span>, <span class=\"hljs-string\">\"test value\"</span>);\n        <span class=\"hljs-comment\">//msgType is used for consumer filtering, and msgTime(accurate to minute) is used as the pipe to send and receive statistics</span>\n        SimpleDateFormat sdf = <span class=\"hljs-keyword\">new</span> SimpleDateFormat(<span class=\"hljs-string\">\"yyyyMMddHHmm\"</span>);\n        message.putSystemHeader(<span class=\"hljs-string\">\"test\"</span>, sdf.format(<span class=\"hljs-keyword\">new</span> Date()));\n        messageProducer.sendMessage(message);\n        messageProducer.shutdown();\n    }\n\n}\n</code></pre>\n</li>\n</ol>\n<ul>\n<li>\n<p>TubeMultiSessionFactory</p>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MultiSessionProducerExample</span> </span>{\n    \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> <span class=\"hljs-keyword\">throws</span> Throwable </span>{\n        <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">int</span> SESSION_FACTORY_NUM = <span class=\"hljs-number\">10</span>;\n        <span class=\"hljs-keyword\">final</span> String masterHostAndPort = <span class=\"hljs-string\">\"localhost:8000\"</span>;\n        <span class=\"hljs-keyword\">final</span> TubeClientConfig clientConfig = <span class=\"hljs-keyword\">new</span> TubeClientConfig(masterHostAndPort);\n        <span class=\"hljs-keyword\">final</span> List&lt;MessageSessionFactory&gt; sessionFactoryList = <span class=\"hljs-keyword\">new</span> ArrayList&lt;&gt;(SESSION_FACTORY_NUM);\n        <span class=\"hljs-keyword\">final</span> ExecutorService sendExecutorService = Executors.newFixedThreadPool(SESSION_FACTORY_NUM);\n        <span class=\"hljs-keyword\">final</span> CountDownLatch latch = <span class=\"hljs-keyword\">new</span> CountDownLatch(SESSION_FACTORY_NUM);\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; SESSION_FACTORY_NUM; i++) {\n            TubeMultiSessionFactory tubeMultiSessionFactory = <span class=\"hljs-keyword\">new</span> TubeMultiSessionFactory(clientConfig);\n            sessionFactoryList.add(tubeMultiSessionFactory);\n            MessageProducer producer = tubeMultiSessionFactory.createProducer();\n            Sender sender = <span class=\"hljs-keyword\">new</span> Sender(producer, latch);\n            sendExecutorService.submit(sender);\n        }\n        latch.await();\n        sendExecutorService.shutdownNow();\n        <span class=\"hljs-keyword\">for</span> (MessageSessionFactory sessionFactory : sessionFactoryList) {\n            sessionFactory.shutdown();\n        }\n    }\n\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Sender</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">Runnable</span> </span>{\n        \n        <span class=\"hljs-keyword\">private</span> MessageProducer producer;\n        \n        <span class=\"hljs-keyword\">private</span> CountDownLatch latch;\n\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">Sender</span><span class=\"hljs-params\">(MessageProducer producer, CountDownLatch latch)</span> </span>{\n            <span class=\"hljs-keyword\">this</span>.producer = producer;\n            <span class=\"hljs-keyword\">this</span>.latch = latch;\n        }\n\n        <span class=\"hljs-meta\">@Override</span>\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">run</span><span class=\"hljs-params\">()</span> </span>{\n            <span class=\"hljs-keyword\">final</span> String topic = <span class=\"hljs-string\">\"test\"</span>;\n            <span class=\"hljs-keyword\">try</span> {\n                producer.publish(topic);\n                <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">byte</span>[] bodyData = StringUtils.getBytesUtf8(<span class=\"hljs-string\">\"This is a test message from multi-session factory\"</span>);\n                Message message = <span class=\"hljs-keyword\">new</span> Message(topic, bodyData);\n                producer.sendMessage(message);\n                producer.shutdown();\n            } <span class=\"hljs-keyword\">catch</span> (Throwable ex) {\n                System.out.println(<span class=\"hljs-string\">\"send message error : \"</span> + ex);\n            } <span class=\"hljs-keyword\">finally</span> {\n                latch.countDown();\n            }\n        }\n    }\n}\n</code></pre>\n</li>\n</ul>\n",
  "link": "/en-us/docs/producer_example.html",
  "meta": {}
}