{
  "filename": "tubemq_user_guide.md",
  "__html": "<h1>TubeMQ User Guide</h1>\n<h2>Prerequisites</h2>\n<ul>\n<li>Java 1.7 or 1.8(Java 9 and above haven't been verified yet)</li>\n<li>Maven</li>\n<li><a href=\"https://github.com/protocolbuffers/protobuf/releases/tag/v2.5.0\">protoc 2.5.0</a></li>\n</ul>\n<h2>Build</h2>\n<h3>Build distribution tarball</h3>\n<p>Go to the project root, and run</p>\n<pre><code class=\"language-bash\">mvn clean package -DskipTests\n</code></pre>\n<p>If you want to build each module of the project separately, you need to run <code>mvn install</code> in the project root at first.</p>\n<h3>Build source code</h3>\n<p>If you want to build and debug source code in IDE, go to the project root, and run</p>\n<pre><code class=\"language-bash\">mvn compile\n</code></pre>\n<p>This command will generate the Java source files from the <code>protoc</code> files, the generated files located in <code>target/generated-sources</code>.</p>\n<p>When this command finished, you can use IDE import the project as maven project.</p>\n<h2>Deploy</h2>\n<p>After the build, please go to <code>tubemq-server/target</code>. You can find the\n<strong>tubemq-server-x.x.x-bin.tar.gz</strong> file. It is the server deployment package, which includes\nscripts, configuration files, dependency jars and web GUI code.</p>\n<p>For the first time deployment, we just need to extract the package file. For example, we put these\nfiles into the <code>/opt/tubemq-server</code>, here's the folder structure.</p>\n<pre><code>/opt/tubemq-server\n├── bin\n├── conf\n├── lib\n├── logs\n└── resources\n</code></pre>\n<h2>Configure</h2>\n<p>There're two roles in the cluster: <strong>Master</strong> and <strong>Broker</strong>. Master and Broker\ncan be deployed on the same server or different servers. In this example, we setup our cluster\nlike this, and all services run on the same node. Zookeeper should be setup in your environment also.</p>\n<table>\n<thead>\n<tr>\n<th>Role</th>\n<th>TCP Port</th>\n<th>TLS Port</th>\n<th>Web Port</th>\n<th>Comment</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Master</td>\n<td>8099</td>\n<td>8199</td>\n<td>8080</td>\n<td>Meta data is stored at /stage/metadata</td>\n</tr>\n<tr>\n<td>Broker</td>\n<td>8123</td>\n<td>8124</td>\n<td>8081</td>\n<td>Message is stored at /stage/msgdata</td>\n</tr>\n<tr>\n<td>Zookeeper</td>\n<td>2181</td>\n<td></td>\n<td></td>\n<td>Offset is stored at /tubemq</td>\n</tr>\n</tbody>\n</table>\n<p>You can follow the example below to update the corresponding config files. Please notice that the <strong>YOUR_SERVER_IP</strong> should\nbe replaced with your server IP.</p>\n<h5>conf/master.ini</h5>\n<pre><code class=\"language-ini\"><span class=\"hljs-section\">[master]</span>\n<span class=\"hljs-attr\">hostName</span>=YOUR_SERVER_IP\n<span class=\"hljs-attr\">port</span>=<span class=\"hljs-number\">8000</span>\n<span class=\"hljs-attr\">webPort</span>=<span class=\"hljs-number\">8080</span>\n<span class=\"hljs-attr\">consumerBalancePeriodMs</span>=<span class=\"hljs-number\">30000</span>\n<span class=\"hljs-attr\">firstBalanceDelayAfterStartMs</span>=<span class=\"hljs-number\">60000</span>\n<span class=\"hljs-attr\">consumerHeartbeatTimeoutMs</span>=<span class=\"hljs-number\">30000</span>\n<span class=\"hljs-attr\">producerHeartbeatTimeoutMs</span>=<span class=\"hljs-number\">45000</span>\n<span class=\"hljs-attr\">brokerHeartbeatTimeoutMs</span>=<span class=\"hljs-number\">25000</span>\n<span class=\"hljs-attr\">confModAuthToken</span>=abc\n<span class=\"hljs-attr\">webResourcePath</span>=/opt/tubemq-server/resources\n\n<span class=\"hljs-section\">[zookeeper]</span>\n<span class=\"hljs-attr\">zkNodeRoot</span>=/tubemq\n<span class=\"hljs-attr\">zkServerAddr</span>=localhost:<span class=\"hljs-number\">2181</span>\n<span class=\"hljs-attr\">zkSessionTimeoutMs</span>=<span class=\"hljs-number\">30000</span>\n<span class=\"hljs-attr\">zkConnectionTimeoutMs</span>=<span class=\"hljs-number\">30000</span>\n<span class=\"hljs-attr\">zkSyncTimeMs</span>=<span class=\"hljs-number\">5000</span>\n<span class=\"hljs-attr\">zkCommitPeriodMs</span>=<span class=\"hljs-number\">5000</span>\n\n<span class=\"hljs-section\">[bdbStore]</span>\n<span class=\"hljs-attr\">bdbRepGroupName</span>=tubemqMasterGroup\n<span class=\"hljs-attr\">bdbNodeName</span>=tubemqMasterGroupNode1\n<span class=\"hljs-attr\">bdbNodePort</span>=<span class=\"hljs-number\">9001</span>\n<span class=\"hljs-attr\">bdbEnvHome</span>=/stage/metadata\n<span class=\"hljs-attr\">bdbHelperHost</span>=<span class=\"hljs-number\">9.134</span>.<span class=\"hljs-number\">8.170</span>:<span class=\"hljs-number\">9001</span>\n<span class=\"hljs-attr\">bdbLocalSync</span>= <span class=\"hljs-number\">1</span>\n<span class=\"hljs-attr\">bdbReplicaSync</span>= <span class=\"hljs-number\">3</span>\n<span class=\"hljs-attr\">bdbReplicaAck</span>= <span class=\"hljs-number\">1</span>\n<span class=\"hljs-attr\">bdbStatusCheckTimeoutMs</span>=<span class=\"hljs-number\">10000</span>\n</code></pre>\n<h5>resources/velocity.properties</h5>\n<pre><code class=\"language-properties\"><span class=\"hljs-meta\">resource.loader</span>=<span class=\"hljs-string\">file</span>\n<span class=\"hljs-meta\">file.resource.loader.description</span>=<span class=\"hljs-string\">Velocity File Resource Loader</span>\n<span class=\"hljs-meta\">file.resource.loader.class</span>=<span class=\"hljs-string\">org.apache.velocity.runtime.resource.loader.FileResourceLoader</span>\n<span class=\"hljs-meta\">file.resource.loader.path</span>=<span class=\"hljs-string\">/opt/tubemq-server/resources/templates</span>\n<span class=\"hljs-meta\">file.resource.loader.cache</span>=<span class=\"hljs-string\">false</span>\n<span class=\"hljs-meta\">file.resource.loader.modificationCheckInterval</span>=<span class=\"hljs-string\">2</span>\n<span class=\"hljs-meta\">string.resource.loader.description</span>=<span class=\"hljs-string\">Velocity String Resource Loader</span>\n<span class=\"hljs-meta\">string.resource.loader.class</span>=<span class=\"hljs-string\">org.apache.velocity.runtime.resource.loader.StringResourceLoader</span>\n<span class=\"hljs-meta\">input.encoding</span>=<span class=\"hljs-string\">UTF-8</span>\n<span class=\"hljs-meta\">output.encoding</span>=<span class=\"hljs-string\">UTF-8</span>\n</code></pre>\n<h5>conf/broker.ini</h5>\n<pre><code class=\"language-ini\"><span class=\"hljs-section\">[broker]</span>\n<span class=\"hljs-attr\">brokerId</span>=<span class=\"hljs-number\">0</span>\n<span class=\"hljs-attr\">hostName</span>=YOUR_SERVER_IP\n<span class=\"hljs-attr\">port</span>=<span class=\"hljs-number\">8123</span>\n<span class=\"hljs-attr\">webPort</span>=<span class=\"hljs-number\">8081</span>\n<span class=\"hljs-attr\">masterAddressList</span>=YOUR_SERVER_IP:<span class=\"hljs-number\">8000</span>\n<span class=\"hljs-attr\">primaryPath</span>=/stage/msgdata\n<span class=\"hljs-attr\">maxSegmentSize</span>=<span class=\"hljs-number\">1073741824</span>\n<span class=\"hljs-attr\">maxIndexSegmentSize</span>=<span class=\"hljs-number\">22020096</span>\n<span class=\"hljs-attr\">transferSize</span>= <span class=\"hljs-number\">524288</span>\n<span class=\"hljs-attr\">loadMessageStoresInParallel</span>=<span class=\"hljs-literal\">true</span>\n<span class=\"hljs-attr\">consumerRegTimeoutMs</span>=<span class=\"hljs-number\">35000</span>\n\n<span class=\"hljs-section\">[zookeeper]</span>\n<span class=\"hljs-attr\">zkNodeRoot</span>=/tubemq\n<span class=\"hljs-attr\">zkServerAddr</span>=localhost:<span class=\"hljs-number\">2181</span>\n<span class=\"hljs-attr\">zkSessionTimeoutMs</span>=<span class=\"hljs-number\">30000</span>\n<span class=\"hljs-attr\">zkConnectionTimeoutMs</span>=<span class=\"hljs-number\">30000</span>\n<span class=\"hljs-attr\">zkSyncTimeMs</span>=<span class=\"hljs-number\">5000</span>\n<span class=\"hljs-attr\">zkCommitPeriodMs</span>=<span class=\"hljs-number\">5000</span>\n<span class=\"hljs-attr\">zkCommitFailRetries</span>=<span class=\"hljs-number\">10</span>\n\n</code></pre>\n<p>You also need to update your <code>/etc/hosts</code> file on the master servers. Add other master\nserver IPs in this way, assume the ip is <code>192.168.1.2</code>:</p>\n<h5>/etc/hosts</h5>\n<pre><code>192.168.1.2 192-168-1-2\n</code></pre>\n<h2>High Availability</h2>\n<p>In the example above, we run the services on a single node. However, in real production environment, you\nneed to run multiple master services on different servers for high availability purpose. Here's\nthe introduction of availability level.</p>\n<table>\n<thead>\n<tr>\n<th>HA Level</th>\n<th>Master Number</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>High</td>\n<td>3 masters</td>\n<td>After any master crashed, the cluster meta data is still in read/write state and can accept new producers/consumers.</td>\n</tr>\n<tr>\n<td>Medium</td>\n<td>2 masters</td>\n<td>After one master crashed, the cluster meta data is in read only state. There's no affect on existing producers and consumers.</td>\n</tr>\n<tr>\n<td>Minimum</td>\n<td>1 master</td>\n<td>After the master crashed, there's no affect on existing producer and consumer.</td>\n</tr>\n</tbody>\n</table>\n<p>Please notice that the master servers should be clock synchronized.</p>\n<h2>Start Master</h2>\n<p>After update the config file, please go to the <code>bin</code> folder and run this command to start\nthe master service.</p>\n<pre><code class=\"language-bash\">./master.sh start\n</code></pre>\n<p>You should be able to access <code>http://your-master-ip:8080/config/topic_list.htm</code> to see the\nweb GUI now.</p>\n<p><img src=\"img/tubemq-console-gui.png\" alt=\"TubeMQ Console GUI\"></p>\n<h2>Start Broker</h2>\n<p>Before we start a broker service, we need to configure it on master web GUI first.</p>\n<p>Go to the <code>Broker List</code> page, click <code>Add Single Broker</code>, and input the new broker\ninformation.</p>\n<p><img src=\"img/tubemq-add-broker-1.png\" alt=\"Add Broker 1\"></p>\n<p>In this example, we only need to input broker IP and authToken:</p>\n<ol>\n<li>broker IP: broker server ip</li>\n<li>authToken: A token pre-configured in the <code>conf/master.ini</code> file. Please check the\n<code>confModAuthToken</code> field in your <code>master.ini</code> file.</li>\n</ol>\n<p>Click the online link to activate the new added broker.</p>\n<p><img src=\"img/tubemq-add-broker-2.png\" alt=\"Add Broker 2\"></p>\n<p>Go to the broker server, under the <code>bin</code> folder run this command to start the broker service</p>\n<pre><code class=\"language-bash\">./broker.sh start\n</code></pre>\n<p>Refresh the GUI broker list page, you can see that the broker now is registered.</p>\n<p>After the sub-state of the broker changed to <code>idle</code>, we can add topics to that broker.</p>\n<p><img src=\"img/tubemq-add-broker-3.png\" alt=\"Add Broker 3\"></p>\n<h2>Add Topic</h2>\n<p>We can add or manage the cluster topics on the web GUI. To add a new topic, go to the\ntopic list page and click the add new topic button</p>\n<p><img src=\"img/tubemq-add-topic-1.png\" alt=\"Add Topic 1\"></p>\n<p>Then select the brokers which you want to deploy the topics to.</p>\n<p><img src=\"img/tubemq-add-topic-5.png\" alt=\"Add Topic 5\"></p>\n<p>We can see the publish and subscribe state of the new added topic is still grey. We need\nto go to the broker list page to reload the broker configuration.</p>\n<p><img src=\"img/tubemq-add-topic-6.png\" alt=\"Add Topic 6\"></p>\n<p><img src=\"img/tubemq-add-topic-2.png\" alt=\"Add Topic 2\"></p>\n<p>When the broker sub-state changed to idle, go to the topic list page. We can see\nthat the topic publish/subscribe state is active now.</p>\n<p><img src=\"img/tubemq-add-topic-3.png\" alt=\"Add Topic 3\"></p>\n<p><img src=\"img/tubemq-add-topic-4.png\" alt=\"Add Topic 4\"></p>\n<p>Now we can use the topic to send messages.</p>\n<h2>Demo</h2>\n<p>Now we can run the example to test our cluster. First let's run the produce data demo. Please don't\nforget replace <code>YOUR_SERVER_IP</code> with your server ip.</p>\n<pre><code class=\"language-bash\">java -Dlog4j.configuration=file:/opt/tubemq-server/conf/tools.log4j.properties  -Djava.net.preferIPv4Stack=<span class=\"hljs-literal\">true</span> -cp  /opt/tubemq-server/lib/*:/opt/tubemq-server/conf/*: com.tencent.tubemq.example.MessageProducerExample YOUR_SERVER_IP YOUR_SERVER_IP:8000 demo 10000000\n</code></pre>\n<p>From the log, we can see the message is sent out.</p>\n<pre><code class=\"language-bash\">[2019-09-11 16:09:08,287] INFO Send demo 1000 message, keyCount is 268 (com.tencent.tubemq.example.MessageProducerExample)\n[2019-09-11 16:09:08,505] INFO Send demo 2000 message, keyCount is 501 (com.tencent.tubemq.example.MessageProducerExample)\n[2019-09-11 16:09:08,958] INFO Send demo 3000 message, keyCount is 755 (com.tencent.tubemq.example.MessageProducerExample)\n[2019-09-11 16:09:09,085] INFO Send demo 4000 message, keyCount is 1001 (com.tencent.tubemq.example.MessageProducerExample)\n</code></pre>\n<p>Then we run the consume data demo. Also replace the server ip</p>\n<pre><code class=\"language-bash\">java -Xmx512m -Dlog4j.configuration=file:/opt/tubemq-server/conf/tools.log4j.properties -Djava.net.preferIPv4Stack=<span class=\"hljs-literal\">true</span> -cp /opt/tubemq-server/lib/*:/opt/tubemq-server/conf/*: com.tencent.tubemq.example.MessageConsumerExample YOUR_SERVER_IP YOUR_SERVER_IP:8000 demo demoGroup 3 1 1\n</code></pre>\n<p>From the log, we can see the message received by the consumer.</p>\n<pre><code class=\"language-bash\">[2019-09-11 16:09:29,720] INFO Receive messages:2500 (com.tencent.tubemq.example.MsgRecvStats)\n[2019-09-11 16:09:30,059] INFO Receive messages:5000 (com.tencent.tubemq.example.MsgRecvStats)\n[2019-09-11 16:09:34,493] INFO Receive messages:10000 (com.tencent.tubemq.example.MsgRecvStats)\n[2019-09-11 16:09:34,783] INFO Receive messages:12500 (com.tencent.tubemq.example.MsgRecvStats)\n</code></pre>\n<hr>\n",
  "link": "/en-us/docs/tubemq_user_guide.html",
  "meta": {}
}