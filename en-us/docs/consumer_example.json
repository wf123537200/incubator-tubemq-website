{
  "filename": "consumer_example.md",
  "__html": "<h2>Consumer Example</h2>\n<p>TubeMQ provides two ways to consumer message, PullConsumer and PushConsumer:</p>\n<ol>\n<li>\n<p>PullConsumer</p>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">PullConsumerExample</span> </span>{\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> <span class=\"hljs-keyword\">throws</span> Throwable </span>{\n        <span class=\"hljs-keyword\">final</span> String masterHostAndPort = <span class=\"hljs-string\">\"localhost:8000\"</span>;\n        <span class=\"hljs-keyword\">final</span> String topic = <span class=\"hljs-string\">\"test\"</span>;\n        <span class=\"hljs-keyword\">final</span> String group = <span class=\"hljs-string\">\"test-group\"</span>;\n        <span class=\"hljs-keyword\">final</span> ConsumerConfig consumerConfig = <span class=\"hljs-keyword\">new</span> ConsumerConfig(masterHostAndPort, group);\n        consumerConfig.setConsumePosition(ConsumePosition.CONSUMER_FROM_LATEST_OFFSET);\n        <span class=\"hljs-keyword\">final</span> MessageSessionFactory messageSessionFactory = <span class=\"hljs-keyword\">new</span> TubeSingleSessionFactory(consumerConfig);\n        <span class=\"hljs-keyword\">final</span> PullMessageConsumer messagePullConsumer = messageSessionFactory.createPullConsumer(consumerConfig);\n        messagePullConsumer.subscribe(topic, <span class=\"hljs-keyword\">null</span>);\n        messagePullConsumer.completeSubscribe();\n        <span class=\"hljs-comment\">// wait for client to join the exact consumer queue that consumer group allocated</span>\n        <span class=\"hljs-keyword\">while</span> (!messagePullConsumer.isPartitionsReady(<span class=\"hljs-number\">1000</span>)) {\n            ThreadUtils.sleep(<span class=\"hljs-number\">1000</span>);\n        }\n        <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-keyword\">true</span>) {\n            ConsumerResult result = messagePullConsumer.getMessage();\n            <span class=\"hljs-keyword\">if</span> (result.isSuccess()) {\n                List&lt;Message&gt; messageList = result.getMessageList();\n                <span class=\"hljs-keyword\">for</span> (Message message : messageList) {\n                    System.out.println(<span class=\"hljs-string\">\"received message : \"</span> + message);\n                }\n                messagePullConsumer.confirmConsume(result.getConfirmContext(), <span class=\"hljs-keyword\">true</span>);\n            } <span class=\"hljs-keyword\">else</span> {\n                <span class=\"hljs-keyword\">if</span> (result.getErrCode() == <span class=\"hljs-number\">400</span>) {\n                    ThreadUtils.sleep(<span class=\"hljs-number\">100</span>);\n                } <span class=\"hljs-keyword\">else</span> {\n                    <span class=\"hljs-keyword\">if</span> (result.getErrCode() != <span class=\"hljs-number\">404</span>) {\n                        System.out.println(String.format(<span class=\"hljs-string\">\"Receive messages errorCode is %d, Error message is %s\"</span>, result.getErrCode(), result.getErrMsg()));\n                    }\n                }\n            }\n        }\n    }   \n\n}\n</code></pre>\n</li>\n<li>\n<p>PushConsumer</p>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">PushConsumerExample</span> </span>{\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">test</span><span class=\"hljs-params\">(String[] args)</span> <span class=\"hljs-keyword\">throws</span> Throwable </span>{\n        <span class=\"hljs-keyword\">final</span> String masterHostAndPort = <span class=\"hljs-string\">\"localhost:8000\"</span>;\n        <span class=\"hljs-keyword\">final</span> String topic = <span class=\"hljs-string\">\"test\"</span>;\n        <span class=\"hljs-keyword\">final</span> String group = <span class=\"hljs-string\">\"test-group\"</span>;\n        <span class=\"hljs-keyword\">final</span> ConsumerConfig consumerConfig = <span class=\"hljs-keyword\">new</span> ConsumerConfig(masterHostAndPort, group);\n        consumerConfig.setConsumePosition(ConsumePosition.CONSUMER_FROM_LATEST_OFFSET);\n        <span class=\"hljs-keyword\">final</span> MessageSessionFactory messageSessionFactory = <span class=\"hljs-keyword\">new</span> TubeSingleSessionFactory(consumerConfig);\n        <span class=\"hljs-keyword\">final</span> PushMessageConsumer pushConsumer = messageSessionFactory.createPushConsumer(consumerConfig);\n        pushConsumer.subscribe(topic, <span class=\"hljs-keyword\">null</span>, <span class=\"hljs-keyword\">new</span> MessageListener() {\n\n            <span class=\"hljs-meta\">@Override</span>\n            <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">receiveMessages</span><span class=\"hljs-params\">(List&lt;Message&gt; messages)</span> <span class=\"hljs-keyword\">throws</span> InterruptedException </span>{\n                <span class=\"hljs-keyword\">for</span> (Message message : messages) {\n                    System.out.println(<span class=\"hljs-string\">\"received message : \"</span> + <span class=\"hljs-keyword\">new</span> String(message.getData()));\n                }\n            }\n\n            <span class=\"hljs-meta\">@Override</span>\n            <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> Executor <span class=\"hljs-title\">getExecutor</span><span class=\"hljs-params\">()</span> </span>{\n                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">null</span>;\n            }\n\n            <span class=\"hljs-meta\">@Override</span>\n            <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">stop</span><span class=\"hljs-params\">()</span> </span>{\n                <span class=\"hljs-comment\">//</span>\n            }\n        });\n        pushConsumer.completeSubscribe();\n        CountDownLatch latch = <span class=\"hljs-keyword\">new</span> CountDownLatch(<span class=\"hljs-number\">1</span>);\n        latch.await(<span class=\"hljs-number\">10</span>, TimeUnit.MINUTES);\n    }\n}\n</code></pre>\n</li>\n</ol>\n",
  "link": "/en-us/docs/consumer_example.html",
  "meta": {}
}